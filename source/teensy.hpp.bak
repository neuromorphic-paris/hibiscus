template <typename HandleEvent, typename HandleException>
class specialized_teensy : public teensy {
    public:
    specialized_teensy(HandleEvent handle_event, HandleException handle_exception) :
        _handle_event(std::forward<HandleEvent>(handle_event)),
        _handle_exception(std::forward<HandleException>(handle_exception)),
        _running(true) {
        send('r');
        {
            uint8_t state = 0;
            auto ready = false;
            while (!ready) {
                uint8_t byte;
                try {
                    byte = _tty.read();
                } catch (const std::runtime_error&) {
                    continue;
                }
                switch (state) {
                    case 0:
                        if (byte == 0x00) {
                            state = 1;
                        }
                        break;
                    case 1:
                        if (byte == 'r') {
                            state = 2;
                        } else {
                            state = 0;
                        }
                        break;
                    case 2:
                        if (byte == 0xff) {
                            ready = true;
                        } else {
                            state = 0;
                        }
                        break;
                    default:
                        break;
                }
            }
        }
        _read_loop = std::thread([this]() {
            try {
                auto previous_teensy_t = 0u;
                auto t_correction = 0ull;
                auto teensy_t_to_t = [&](uint32_t teensy_t) -> uint64_t {
                    if (teensy_t < previous_teensy_t) {
                        t_correction += static_cast<uint64_t>(std::numeric_limits<uint32_t>::max()) + 1;
                    }
                    previous_teensy_t = teensy_t;
                    return static_cast<uint64_t>(teensy_t) + t_correction;
                };
                std::vector<buffered_event> buffered_events;
                std::vector<uint8_t> message;
                message.reserve(9);
                bool reading = false;
                bool escaped = false;
                while (_running.load(std::memory_order_acquire)) {
                    uint8_t byte;
                    try {
                        byte = _tty.read();
                    } catch (const std::runtime_error&) {
                        continue;
                    }
                    if (reading) {
                        if (escaped) {
                            escaped = false;
                            switch (byte) {
                                case 0xab:
                                    message.push_back(0x00);
                                    break;
                                case 0xac:
                                    message.push_back(0xaa);
                                    break;
                                case 0xad:
                                    message.push_back(0xff);
                                    break;
                                default:
                                    reading = false;
                            }
                        } else {
                            switch (byte) {
                                case 0x00:
                                    message.clear();
                                    break;
                                case 0xaa:
                                    escaped = true;
                                    break;
                                case 0xff:
                                    reading = false;
                                    if (message.size() == 5) {
                                        if (message[0] == 'f') {
                                            const auto t = teensy_t_to_t(message_to_teensy_t(message));
                                            for (auto& buffered_event : buffered_events) {
                                                if (!buffered_event.corrected) {
                                                    std::array<std::pair<uint64_t, uint64_t>, 3> differences_and_ts{
                                                        difference_and_t(t, buffered_event.event.t + t_correction),
                                                        difference_and_t(
                                                            t,
                                                            buffered_event.event.t + t_correction
                                                                + std::numeric_limits<uint32_t>::max() + 1),
                                                        t_correction > 0 ?
                                                            difference_and_t(
                                                                t,
                                                                buffered_event.event.t + t_correction
                                                                    - (std::numeric_limits<uint32_t>::max() + 1)) :
                                                            std::pair<uint64_t, uint64_t>{
                                                                std::numeric_limits<uint64_t>::max(), 0},
                                                    };
                                                    std::sort(differences_and_ts.begin(), differences_and_ts.end());
                                                    buffered_event.event.t = std::get<0>(differences_and_ts).second;
                                                    buffered_event.corrected = true;
                                                }
                                            }
                                            std::sort(
                                                buffered_events.begin(),
                                                buffered_events.end(),
                                                [](buffered_event first, buffered_event second) {
                                                    return first.event.t < second.event.t;
                                                });
                                            auto event_iterator = buffered_events.begin();
                                            for (; event_iterator != buffered_events.end()
                                                   && event_iterator->event.t < t;
                                                 ++event_iterator) {
                                                _handle_event(event_iterator->event);
                                            }
                                            buffered_events.erase(buffered_events.begin(), event_iterator);
                                        } else if (
                                            message[0] == 'd' || message[0] == 'e' || message[0] == 'l'
                                            || message[0] == 'r') {
                                            buffered_events.push_back(
                                                {{message_to_teensy_t(message), message[0]}, false});
                                        } else if (message[0] == 'c') {
                                            _handle_event(teensy_event{message_to_teensy_t(message), message[0]});
                                        } else {
                                            _handle_event(teensy_event{teensy_t_to_t(message_to_teensy_t(message)),
                                                                       message[0]});
                                        }
                                    }
                                    break;
                                default:
                                    message.push_back(byte);
                                    break;
                            }
                        }
                        if (message.size() > 5) {
                            reading = false;
                        }
                    } else if (byte == 0x00) {
                        reading = true;
                        escaped = false;
                        message.clear();
                    }
                }
                {
                    const auto t = static_cast<uint64_t>(previous_teensy_t) + t_correction;
                    for (auto& buffered_event : buffered_events) {
                        if (!buffered_event.corrected) {
                            std::array<std::pair<uint64_t, uint64_t>, 3> differences_and_ts{
                                difference_and_t(t, buffered_event.event.t + t_correction),
                                difference_and_t(
                                    t,
                                    buffered_event.event.t + t_correction + std::numeric_limits<uint32_t>::max()
                                        + 1),
                                t_correction > 0 ?
                                    difference_and_t(
                                        t,
                                        buffered_event.event.t + t_correction
                                            - (std::numeric_limits<uint32_t>::max() + 1)) :
                                    std::pair<uint64_t, uint64_t>{std::numeric_limits<uint64_t>::max(), 0},
                            };
                            std::sort(differences_and_ts.begin(), differences_and_ts.end());
                            buffered_event.event.t = std::get<0>(differences_and_ts).second;
                            buffered_event.corrected = true;
                        }
                    }
                    std::sort(
                        buffered_events.begin(),
                        buffered_events.end(),
                        [](buffered_event first, buffered_event second) { return first.event.t < second.event.t; });
                    for (auto buffered_event : buffered_events) {
                        _handle_event(buffered_event.event);
                    }
                }
            } catch (...) {
                this->_handle_exception(std::current_exception());
            }
        });
    }
    specialized_teensy(const specialized_teensy&) = delete;
    specialized_teensy(specialized_teensy&&) = default;
    specialized_teensy& operator=(const specialized_teensy&) = delete;
    specialized_teensy& operator=(specialized_teensy&&) = default;
    virtual ~specialized_teensy() {
        _running.store(false, std::memory_order_release);
        _read_loop.join();
    }

    protected:
    /// buffered_event is used as part of the timestamp correction process.
    struct buffered_event {
        teensy_event event;
        bool corrected;
    };

    /// message_to_teensy_t interprets a message's bytes.
    static uint32_t message_to_teensy_t(const std::vector<uint8_t>& message) {
        return static_cast<uint32_t>(message[1]) | (static_cast<uint32_t>(message[2]) << 8)
               | (static_cast<uint32_t>(message[3]) << 16) | (static_cast<uint32_t>(message[4]) << 24);
    }

    /// absolute_difference returns the absolute distance between two unsigned integers.
    static uint64_t absolute_difference(uint64_t first, uint64_t second) {
        if (first > second) {
            return first - second;
        }
        return second - first;
    }

    /// difference_and_t wraps a candidate t and a distance in a pair.
    static std::pair<uint64_t, uint64_t> difference_and_t(uint64_t t, uint64_t candidate_t) {
        return {absolute_difference(t, candidate_t), candidate_t};
    }

    HandleEvent _handle_event;
    HandleException _handle_exception;
    std::atomic_bool _running;
    std::thread _read_loop;
};
